<?xml version="1.0" encoding="UTF-8" ?>

<xsd:schema xmlns="http://www.springframework.org/schema/mvc"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		xmlns:beans="http://www.springframework.org/schema/beans"
		xmlns:tool="http://www.springframework.org/schema/tool"
		targetNamespace="http://www.springframework.org/schema/mvc"
		elementFormDefault="qualified"
		attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans" schemaLocation="http://www.springframework.org/schema/beans/spring-beans-4.2.xsd"/>
	<xsd:import namespace="http://www.springframework.org/schema/tool" schemaLocation="http://www.springframework.org/schema/tool/spring-tool-4.2.xsd"/>

	<xsd:element name="annotation-driven">
		<xsd:annotation>
			<xsd:documentation source="java:org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"><![CDATA[
	Configures the annotation-driven Spring MVC Controller programming model.
	Note that this tag works in Web MVC only, not in Portlet MVC!

	See org.springframework.web.servlet.config.annotation.EnableWebMvc javadoc for details
	on code-based alternatives to enabling annotation-driven Spring MVC support.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all minOccurs="0">
				<xsd:element name="path-matching" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	Configures the path matching part of the Spring MVC Controller programming model.
	Like annotation-driven, code-based alternatives are also documented in EnableWebMvc javadoc.
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="suffix-pattern" type="xsd:boolean">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
	Whether to use suffix pattern match (".*") when matching patterns to requests. If enabled
	a method mapped to "/users" also matches to "/users.*".
	The default value is true.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="trailing-slash" type="xsd:boolean">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
	Whether to match to URLs irrespective of the presence of a trailing slash.
	If enabled a method mapped to "/users" also matches to "/users/".
	The default value is true.
										]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="registered-suffixes-only" type="xsd:boolean">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
	Whether to use suffix pattern match for registered file extensions only when matching patterns to requests.
	If enabled, a controller method mapped to "/users" also matches to "/users.json" assuming ".json" is a file extension registered with
	the provided ContentNegotiationManager. This can be useful for allowing only specific URL extensions to be used as well as in cases
	where a "." in the URL path can lead to ambiguous interpretation of path variable content, (e.g. given "/users/{user}" and incoming
	URLs such as "/users/john.j.joe" and "/users/john.j.joe.json").
	If enabled, this attribute also enables suffix-pattern. The default value is false.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="path-helper" type="xsd:string">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
	The bean name of the UrlPathHelper to use for resolution of lookup paths.
	Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across
	multiple HandlerMappings and MethodNameResolvers.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="path-matcher" type="xsd:string">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
	The bean name of the PathMatcher implementation to use for matching URL paths against registered URL patterns.
	Default is AntPathMatcher.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="message-converters" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	Configures one or more HttpMessageConverter types to use for converting @RequestBody method parameters and
	@ResponseBody method return values. Using this configuration element is optional.
	HttpMessageConverter registrations provided here will take precedence over HttpMessageConverter types registered
	by default. Also see the register-defaults attribute if you want to turn off default registrations entirely.
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:choice maxOccurs="unbounded">
								<xsd:element ref="beans:bean">
									<xsd:annotation>
										<xsd:documentation><![CDATA[
	An HttpMessageConverter bean definition.
										]]></xsd:documentation>
									</xsd:annotation>
								</xsd:element>
								<xsd:element ref="beans:ref">
									<xsd:annotation>
										<xsd:documentation><![CDATA[
	A reference to an HttpMessageConverter bean.
										]]></xsd:documentation>
									</xsd:annotation>
								</xsd:element>
							</xsd:choice>
						</xsd:sequence>
						<xsd:attribute name="register-defaults" type="xsd:boolean" default="true">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
	Whether or not default HttpMessageConverter registrations should be added in addition to the ones provided
	within this element.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="argument-resolvers" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	Configures HandlerMethodArgumentResolver types to support custom controller method argument types.
	Using this option does not override the built-in support for resolving handler method arguments.
	To customize the built-in support for argument resolution configure RequestMappingHandlerAdapter directly.
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:choice minOccurs="1" maxOccurs="unbounded">
							<xsd:element ref="beans:bean" minOccurs="0" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	The HandlerMethodArgumentResolver (or WebArgumentResolver for backwards compatibility) bean definition.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="beans:ref" minOccurs="0" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	A reference to a HandlerMethodArgumentResolver bean definition.
									]]></xsd:documentation>
									<xsd:appinfo>
										<tool:annotation kind="ref">
											<tool:expected-type type="java:org.springframework.web.method.support.HandlerMethodArgumentResolver"/>
										</tool:annotation>
									</xsd:appinfo>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="return-value-handlers" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	Configures HandlerMethodReturnValueHandler types to support custom controller method return value handling.
	Using this option does not override the built-in support for handling return values.
	To customize the built-in support for handling return values configure RequestMappingHandlerAdapter directly.
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:choice minOccurs="1" maxOccurs="unbounded">
							<xsd:element ref="beans:bean" minOccurs="0" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	The HandlerMethodReturnValueHandler bean definition.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="beans:ref" minOccurs="0" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	A reference to a HandlerMethodReturnValueHandler bean definition.
									]]></xsd:documentation>
									<xsd:appinfo>
										<tool:annotation kind="ref">
											<tool:expected-type type="java:org.springframework.web.method.support.HandlerMethodReturnValueHandler"/>
										</tool:annotation>
									</xsd:appinfo>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="async-support" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	Configure options for asynchronous request processing.
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all minOccurs="0">
							<xsd:element name="callable-interceptors" minOccurs="0">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	The ordered set of interceptors that intercept the lifecycle of concurrently executed
	requests, which start after a controller returns a java.util.concurrent.Callable.
									]]></xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element ref="beans:bean" minOccurs="1" maxOccurs="unbounded">
											<xsd:annotation>
												<xsd:documentation><![CDATA[
	Registers a CallableProcessingInterceptor.
												]]></xsd:documentation>
											</xsd:annotation>
										</xsd:element>
									</xsd:sequence>
								</xsd:complexType>
							</xsd:element>
							<xsd:element name="deferred-result-interceptors" minOccurs="0">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	The ordered set of interceptors that intercept the lifecycle of concurrently executed
	requests, which start after a controller returns a DeferredResult.
									]]></xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element ref="bea